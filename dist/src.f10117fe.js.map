{"version":3,"sources":["src/ComputerPlayer.ts","src/HumanPlayer.ts","src/NimGame.ts","src/index.ts"],"names":[],"mappings":";;AGAA;AACA;AACA;;;;AAEA,IAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;AACA,IFPa,WAAW;AEQxB,EFPE,SAAA,YAAmB,IAAY,EAAA;AEQjC,IFRiC,eAAA,OAAA,WAAA;AESjC,IFTqB,IAAA,CAAA,IAAI,GAAJ,IAAI;AEUzB,IFTE,IAAA,CAAA,eAAe,GAAqB,EAAE;AEUxC,IFTE,IAAA,CAAA,OAAO,GAAG,IAAI;AEUhB,EFZoC,EDDvB,AEEA,OAAO,OFFO;AGe3B,EHdE,ACAmC,ACOnC,SFPA,AEOA,GDPmC,CAAA,ICOvB,OFPO,ACAgB,IDAJ,AEOK,EFPL,AEOO,cAA8B,EAAA;ACQtE,IHfiC,ACAI,ACOiC,GDPjC,YDAJ,AEOqC,OFPrC,AEOqC,OAAA,OFPrC;AGgBjC,IHhBqB,ACAgB,ACE3B,IFFW,AEEX,CFFW,ACAgB,ACE3B,EDER,EDJuB,GAAJ,AEEJ,GAAa,CFFL,ACIvB,CCF8B,QDErB,aAA0B,EAAA;AEarC,IHhBE,AEEQ,EDC2B,EDHnC,AEEQ,CFFR,AEEQ,CDC2B,KAAA,KCDhB,GAAG,CFFP,CEES,EFFY,EAAE;AGiBxC,IHhBE,AEEQ,IFFR,AEEQ,CFFR,AEEQ,OFFD,GAAG,KAAK,GEEW,GAAG,CAAC;ACehC,EHnBoC,EEQhC,EDHA,ECGI,CAAC,CDHC,MCGM,CAAC,IAAI,CAAC,UDHU,CCGC,EDHE,ACGA,aDHa,CAAC,ACGA,CAAC,QDHQ,CAAC,QAAQ,CAC7D,gCAAgC,CACjC;AEcL,EHrBqC,AESnC,IDAE,IAAM,IDT2B,CAAA,cAAA,ECSN,GAAG,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,MAAK,CAAC;AEapE,EDbG,EFTkC,ECUjC,CDViC,GCU7B,CAAC,GCDN,CAAA,OAAA,WDC4B,IAAI,qBAAqB,EAAE;AEa1D,IHvBqC,AESlC,GAAA,CDEG,CDX+B,EAInC,ECOS,CACH,MDRN,SAAA,EAAQ,2ECQ0F,CAC7F;AEWP,IDfG,EFJC,ECSE,CCLH,CFJO,CEMR,IDGW,IAAI,CAAC,ACHhB,MFNwB,AEMxB,EAAK,CFNmB,MCSO,CAAC,MAAM,KDTd,CACjB,QAAQ,CAAC,gBAAgB,CAC1B,gGAAgG,CACjG,CACF;AGgBL,MHdI,AEAG,IFAG,AEAH,KAAA,iBFAyB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;AGepE,MHbI,ACIA,ACLA,IDKI,ACLE,CFCD,IAAI,CAAC,GAAG,CAAC,AEDE,EFCA,CAAC,AEDD,GFCI,MCIM,EAAE,OCLZ,CACX,MFAqC,EAAE,AEA/B,CFAgC,AEA/B,EFAiC,EAAE,YEAnB,CAAC,uBAAuB,CAAC,CACtD;ACaL,MDZI,EFDE,ACIA,ECHI,EFDE,SCIO,CAAC,ACHE,CFDC,EECkB,CFAjC,IAAI,CAAC,ACGgB,CAAC,CCHmB,CAAC,EFAhC,CAAC,CCGiB,CAAC,EDHd,CAAC,KEAuC,CFAjC,AECxB,EFD0B,GAAG,gBAAgB,CAAC,CCGiB,ACFxC,CDEyC,ACDjE,IFFqD,GAAG,CAAC,CAAC,GAAG,CAAC;AGanE,MDVI,EFFE,ACIA,IDJM,ACIF,CAAC,GCFG,CAAC,OAAO,CAAC,GFFK,ACIF,GDJc,ACIX,IAAI,ACFT,CDEU,OCFF,IFFwB,CAAC,GCIR,CAAC,EDJa,CACvD,GCGgD,CAChD,ODJW,EACX,CAAC,ACGA,CDFF,CAAC,CAAC,CAAC,CCEoB;AEQ9B,QHRM,AEH0B,EDGF,KCFxB,EDE6B,KAAK,CAAC,ACF3B,CFEQ,AEFP,CFEQ,ACAoB,KAAK,IDAhB,CAAC,ACAmB,CAAC,EDAjB,CAAC,CEFN,CAAC,KDE+B,CAAC,CCFzB,EAAE,UDEoC,ACFnC,CDEoC,KCF9B,KFEqB,CAAC;AGStE,QHRM,ACDwE,EACvE,ACHyC,EFGtC,CAAC,IEH0C,KAAI,CAAC,KFGhC,CAAC,EEHuC,CAAC,CFGpC,CAAC,IEHyC,CAAC;ACY1E,OFRK,CCJqE,EFIlE,AEJmE,EFIjE,CCAC,CDAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC;AGS7C,MDb2E,EDKrE,ACJD,EFIG,UAAU,CCAC,CDAC,ACAA,IDAI,KCAK,CAAC,GAAG,CAAC,gCAAgC,CAAC;AESnE,MDZI,EDIE,EDAE,ECAE,CAAC,KCJK,CFIC,EAAE,EEJH,IAAA,CDIU,CAAC,ECJvB,EDI2B,CAAC,SCJhB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZ,YAAY,CAAE,gBAAgB,CAAC,OAAO,EAAE;ACa5C,QDb4C,CFKrC,CAAC,ACAA,EAAE,EAAE,CCLsC,GDKlC,CAAC,CCLqC,CAAC,QDK5B,CAAC,ICLwC,EAAE,ODK7B,CAAC;AEU1C,MDfsE,EAAC,EDM/D,UAAU,EAAE,IAAI;AEUxB,IDfE,EFOE,ICDI,GDCG,CAAC,GAAG,ECDE,EAAE,kCDCJ,MAAA,CAC4B,IAAI,CAAC,eAAe,CAAC,MAAM,EACjE;AGQL,EDjBG,IFWC,GCJG,CAAC,GDIG,IAAI,CAAC,eAAe,CAAC,MAAM;AGOtC,IHNE,AEZC,GAAA;ACmBH,EHPG,EEZA,EDUC,GCVD,EAED,EDQS,IAAI,CAAC,ECRd,SAAS,IDQoB,CAAC,CCRR,EAAA,GDQc;AEUtC,IHRG,ACDD,ECRE,CFSD,GETK,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC;ACkB9D,EFVG,EDCA,EERC,GFQD,CERO,CFUR,SAAA,CEVmB,GAAG,IFUtB,EAAO,AEVqB,CAAC,MAAqB;ACkBpD,IFXG,EDIC,AEVA,CDMD,GDIK,AEVE,CFUD,SEVW,GAAG,GFUC,CEVG,CAAC,CFUD,EAAE,UEVY,CAAC,QAAQ,CAAC,WAAW,CAAC;ACkB/D,IHPE,ACLC,ECJC,GDID,EAED,ECNS,CAAC,GAAG,GDMb,CCNa,MAAA,CDMb,ACNiB,EDMV,ECNc,CAAC,aAAa,CAAC,IAAI,aAAA,MAAA,CAAU,UAAU,eAAY;ACiB1E,EHRG,EERD,EDME,IAAI,CAAC,eAAe,GAAG,EAAE;AEY7B,EDlBG,EFQA,ACDD,GDCC;AGWH,EFZG,EDCA,AERA,GAAA,EFQA,EAED,SAAA,WAAW,KAAc,EAAA;AGU3B,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","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["import { Player } from \"./Player\";\n\nexport class ComputerPlayer implements Player {\n  constructor(public name: string) {}\n  selectedMatches: MatchInterface[] = [];\n  isHuman = false;\n\n  takeTurn(): number {\n    const availableMatches: Element[] = [\n      ...document.querySelectorAll(\n        \".matches__heap__match:not(.matches__heap__match--selected):not(.matches__heap__match--removed)\"\n      ),\n    ];\n\n    const cpuRandomAmountMatches = Math.floor(Math.random() * 3) + 1;\n\n    for (let i = 0; i < cpuRandomAmountMatches; i++) {\n      const randomIndex: number =\n        Math.floor(Math.random() * availableMatches.length - 1) + 1;\n      const cpuSelectedMatch: Element = availableMatches.splice(\n        randomIndex,\n        1\n      )[0];\n\n      cpuSelectedMatch.classList.add(\"matches__heap__match--selected\");\n      this.selectedMatches.push({\n        id: this.getMatchId(cpuSelectedMatch),\n        isSelected: true,\n        isRemoved: false,\n      });\n    }\n\n    console.log(\n      `Computer selected random matches: ${this.selectedMatches.length}`\n    );\n\n    return this.selectedMatches.length;\n  }\n\n  endTurn(): void {\n    this.selectedMatches = [];\n  }\n\n  getMatchId(match: Element): number {\n    return +(match.getAttribute(\"id\") ?? 0);\n  }\n}\n","import { Player } from \"./Player\";\n\nexport class HumanPlayer implements Player {\n  constructor(public name: string) {}\n  selectedMatches: MatchInterface[] = [];\n  isHuman = true;\n\n  takeTurn(selectedMatch: HTMLElement): number {\n    const isMatchAlreadySelected = selectedMatch.classList.contains(\n      \"matches__heap__match--selected\"\n    );\n\n    const isMatchSelectionMaxed = this.selectedMatches?.length === 3;\n    if (!isMatchAlreadySelected && isMatchSelectionMaxed) {\n      alert(\n        \"Only 3 cards are allowed to be selected per each round. Please unselect a card to continue\"\n      );\n      return this.selectedMatches.length;\n    }\n\n    if (isMatchAlreadySelected) {\n      selectedMatch.classList.remove(\"matches__heap__match--selected\");\n\n      this.selectedMatches = this.selectedMatches.filter(\n        (match: MatchInterface) => match.id !== this.getMatchId(selectedMatch)\n      );\n    } else {\n      selectedMatch.classList.add(\"matches__heap__match--selected\");\n      this.selectedMatches.push({\n        id: this.getMatchId(selectedMatch),\n        isSelected: true,\n        isRemoved: false,\n      });\n    }\n\n    return this.selectedMatches.length;\n  }\n\n  endTurn(): void {\n    this.selectedMatches = [];\n  }\n\n  getMatchId(match: Element): number {\n    return +(match.getAttribute(\"id\") ?? 0);\n  }\n}\n","import { ComputerPlayer } from \"./ComputerPlayer\";\nimport { HumanPlayer } from \"./HumanPlayer\";\nimport { Player } from \"./Player\";\n\nexport class NimGame {\n  private players: Player[] = [];\n  private matchesLeft = 13;\n  private currentPlayerIndex = 0;\n  private currentPlayer!: Player;\n\n  constructor(humanPlayer: HumanPlayer, computerPlayer: ComputerPlayer) {\n    this.players.push(humanPlayer, computerPlayer);\n  }\n\n  start(): void {\n    const domMatches: Element[] = [\n      ...document.querySelectorAll(\".matches__heap__match\"),\n    ];\n    const domRemoveBtn: Element | null = document.querySelector(\n      \".actions__btn--remove\"\n    );\n    domMatches.forEach((domMatch) =>\n      domMatch.addEventListener(\"click\", ($event) => this.takeTurn($event))\n    );\n    domRemoveBtn?.addEventListener(\"click\", () => this.removeMatches());\n  }\n\n  takeTurn($event: Event): void {\n    this.currentPlayer = this.players[this.currentPlayerIndex];\n    const pickedMatch = $event.target as HTMLElement;\n    const numMatches = this.currentPlayer.takeTurn(pickedMatch);\n\n    console.log(`${this.currentPlayer.name} takes ${numMatches} matches.`);\n  }\n\n  removeMatches() {\n    this.matchesLeft -= this.currentPlayer.selectedMatches.length;\n\n    const availableMatches: NodeListOf<Element> | null =\n      document.querySelectorAll(\n        \".matches__heap__match:not(.matches__heap__match--selected):not(.matches__heap__match--removed)\"\n      );\n\n    if (availableMatches.length <= 1) {\n      alert(`${this.currentPlayer.name} wins!`);\n      return this.restartGame();\n    }\n\n    // hide removed matches\n    const domMatchesNotRemoved: NodeListOf<Element> | null =\n      document.querySelectorAll(\n        \".matches__heap__match:not(.matches__heap__match--removed)\"\n      );\n    this.currentPlayer?.selectedMatches?.forEach(\n      (selectedMatch: MatchInterface) => {\n        domMatchesNotRemoved.forEach((matchElement: Element) => {\n          if (selectedMatch.id === this.getMatchId(matchElement)) {\n            matchElement.classList.add(\"matches__heap__match--removed\");\n          }\n        });\n      }\n    );\n\n    // pass turn to other player\n    this.endTurn();\n  }\n\n  get getMatchesLeft(): number {\n    return this.matchesLeft;\n  }\n\n  getMatchId(match: Element): number {\n    return +(match.getAttribute(\"id\") ?? 0);\n  }\n\n  restartGame(): void {\n    const allMatches: NodeListOf<Element> | null = document.querySelectorAll(\n      \".matches__heap__match\"\n    );\n    allMatches.forEach((match) => {\n      match.classList.remove(\"matches__heap__match--removed\");\n      match.classList.remove(\"matches__heap__match--selected\");\n    });\n\n    this.endTurn();\n  }\n\n  endTurn(): void {\n    this.currentPlayer.endTurn();\n\n    const nextPlayerIndex = (this.currentPlayerIndex + 1) % 2;\n    this.currentPlayerIndex = nextPlayerIndex;\n    this.currentPlayer = this.players[this.currentPlayerIndex];\n    if (!this.currentPlayer.isHuman) {\n      this.currentPlayer.takeTurn();\n      setTimeout(() => {\n        // timeout just to make it visible CPU is making his move\n        this.removeMatches();\n      }, 1500);\n    }\n  }\n}\n","// import { Match } from \"./Match\";\n// import { NimGame } from \"./NimGame\";\n// import { Player } from \"./Player\";\n\nimport { ComputerPlayer } from \"./ComputerPlayer\";\nimport { HumanPlayer } from \"./HumanPlayer\";\nimport { NimGame } from \"./NimGame\";\n\n// // interface Player {\n// //   name: string;\n// //   selectedMatches: Match[];\n// //   numberOfGames?: number;\n// //   numberOfWins?: number;\n// //   numberOfLosses?: number;\n// //   playerTurn: boolean;\n// // }\n\n// const domMatches: NodeListOf<Element> = document.querySelectorAll(\n//   \".matches__heap__match\"\n// );\n// const domGoButton: HTMLElement | null = document.querySelector(\n//   \".actions__btn--start\"\n// );\n\n// const players: Player[] = [\n//   {\n//     name: \"Fábio\",\n//     numberOfWins: 0,\n//     numberOfLosses: 0,\n//     selectedMatches: [],\n//   },\n//   {\n//     name: \"John\",\n//     numberOfWins: 0,\n//     numberOfLosses: 0,\n//     selectedMatches: [],\n//   },\n// ];\n\n// const newGame = new NimGame(players);\n// newGame.start();\n\n// let domPlayerOneName: HTMLElement | null =\n//   document.querySelector(\".player__one\");\n// let domPlayerTwoName: HTMLElement | null =\n//   document.querySelector(\".player__two\");\n// if (domPlayerOneName)\n//   domPlayerOneName.innerText = `Player 1: ${players[0].name}`;\n// if (domPlayerTwoName)\n//   domPlayerTwoName.innerText = `Player 2: ${players[1].name}`;\n\n// domMatches.forEach((match) => {\n//   match.addEventListener(\"click\", selectMatch);\n// });\n\n// domGoButton?.addEventListener(\"click\", onGoClick);\n\n// function onGoClick($event: Event) {\n//   // if 0 match left = lost game\n//   let numberOfAvailableMatches = 0;\n//   const domMatches: NodeListOf<Element> | null = document.querySelectorAll(\n//     \".matches__heap__match:not(.matches__heap__match--selected):not(.matches__heap__match--removed)\"\n//   );\n\n//   numberOfAvailableMatches = domMatches.length;\n\n//   if (numberOfAvailableMatches === 0) {\n//     alert(\"You lost the game\");\n//     newGame.playerLose(players[0]);\n//     const domMatchesClearing: NodeListOf<Element> | null =\n//       document.querySelectorAll(\".matches__heap__match\");\n//     domMatchesClearing.forEach((matchClear) => {\n//       matchClear.classList.remove(\"matches__heap__match--removed\");\n//       matchClear.classList.remove(\"matches__heap__match--selected\");\n//     });\n//     return;\n//   }\n\n//   // hide removed matches\n//   const playerAtGame: Player | undefined = players.find(\n//     (player) => player.playerTurn === true\n//   );\n//   debugger;\n//   const domMatchesNotRemoved: NodeListOf<Element> | null =\n//     document.querySelectorAll(\n//       \".matches__heap__match:not(.matches__heap__match--removed)\"\n//     );\n//   playerAtGame?.selectedMatches?.forEach((selectedMatch: Match) => {\n//     domMatchesNotRemoved.forEach((matchElement: Element) => {\n//       if (selectedMatch.matchId === getMatchId(matchElement)) {\n//         matchElement.classList.add(\"matches__heap__match--removed\");\n//       }\n//     });\n//   });\n\n//   // pass turn to other player\n//   newGame.nextTurn();\n// }\n\n// function selectMatch($event: Event) {\n//   debugger;\n//   const domSelectedMatch = $event.target as HTMLElement;\n\n//   const isMatchAlreadySelected = domSelectedMatch.classList.contains(\n//     \"matches__heap__match--selected\"\n//   );\n//   const isMatchSelectionMaxed =\n//     newGame.currentPlayer.selectedMatches?.length === 3;\n//   if (!isMatchAlreadySelected && isMatchSelectionMaxed) {\n//     alert(\n//       \"Only 3 cards are allowed to be selected per each round. Please unselect a card to continue\"\n//     );\n//     return;\n//   }\n\n//   if (isMatchAlreadySelected) {\n//     debugger;\n//     domSelectedMatch.classList.remove(\"matches__heap__match--selected\");\n//     newGame.currentPlayer.selectedMatches =\n//       newGame.currentPlayer.selectedMatches?.filter(\n//         (match: Match) => match.matchId !== getMatchId(domSelectedMatch)\n//       );\n//   } else {\n//     domSelectedMatch.classList.add(\"matches__heap__match--selected\");\n//     newGame.selectMatch([\n//       {\n//         matchId: getMatchId(domSelectedMatch),\n//         isSelected: true,\n//       },\n//     ]);\n//   }\n\n//   console.log(newGame.currentPlayer);\n// }\n\n// function getMatchId(match: Element) {\n//   return +(match.getAttribute(\"id\") ?? 0);\n// }\n\nconst humanPlayer = new HumanPlayer(\"Fábio\");\nconst computerPlayer = new ComputerPlayer(\"CPU\");\nconst game = new NimGame(humanPlayer, computerPlayer);\n\ngame.start();\n"]}